// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type connect4_lbLb4Backend struct {
	Address uint32
	Port    uint16
	Pad     uint16
}

type connect4_lbLb4Key struct {
	Address uint32
	Dport   uint16
	Pad     uint16
}

// loadConnect4_lb returns the embedded CollectionSpec for connect4_lb.
func loadConnect4_lb() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Connect4_lbBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load connect4_lb: %w", err)
	}

	return spec, err
}

// loadConnect4_lbObjects loads connect4_lb and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*connect4_lbObjects
//	*connect4_lbPrograms
//	*connect4_lbMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadConnect4_lbObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadConnect4_lb()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// connect4_lbSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type connect4_lbSpecs struct {
	connect4_lbProgramSpecs
	connect4_lbMapSpecs
}

// connect4_lbSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type connect4_lbProgramSpecs struct {
	Connect4Lb *ebpf.ProgramSpec `ebpf:"connect4_lb"`
}

// connect4_lbMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type connect4_lbMapSpecs struct {
	LB4BACKEND_MAP  *ebpf.MapSpec `ebpf:"LB4_BACKEND_MAP"`
	LB4SERVICES_MAP *ebpf.MapSpec `ebpf:"LB4_SERVICES_MAP"`
}

// connect4_lbObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadConnect4_lbObjects or ebpf.CollectionSpec.LoadAndAssign.
type connect4_lbObjects struct {
	connect4_lbPrograms
	connect4_lbMaps
}

func (o *connect4_lbObjects) Close() error {
	return _Connect4_lbClose(
		&o.connect4_lbPrograms,
		&o.connect4_lbMaps,
	)
}

// connect4_lbMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadConnect4_lbObjects or ebpf.CollectionSpec.LoadAndAssign.
type connect4_lbMaps struct {
	LB4BACKEND_MAP  *ebpf.Map `ebpf:"LB4_BACKEND_MAP"`
	LB4SERVICES_MAP *ebpf.Map `ebpf:"LB4_SERVICES_MAP"`
}

func (m *connect4_lbMaps) Close() error {
	return _Connect4_lbClose(
		m.LB4BACKEND_MAP,
		m.LB4SERVICES_MAP,
	)
}

// connect4_lbPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadConnect4_lbObjects or ebpf.CollectionSpec.LoadAndAssign.
type connect4_lbPrograms struct {
	Connect4Lb *ebpf.Program `ebpf:"connect4_lb"`
}

func (p *connect4_lbPrograms) Close() error {
	return _Connect4_lbClose(
		p.Connect4Lb,
	)
}

func _Connect4_lbClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed connect4_lb_bpfeb.o
var _Connect4_lbBytes []byte
